package org.hrachov.com.filmproject.integrationalTestcontainers;

import lombok.extern.slf4j.Slf4j;
import org.hrachov.com.filmproject.controller.NotificationWebSocketController;
import org.hrachov.com.filmproject.model.*;
import org.hrachov.com.filmproject.model.dto.CommentDTO;
import org.hrachov.com.filmproject.model.dto.ReplyDTO;
import org.hrachov.com.filmproject.model.dto.UserDTO;
import org.hrachov.com.filmproject.repository.jpa.*;
import org.hrachov.com.filmproject.security.CurrentUserService;
import org.hrachov.com.filmproject.security.JwtUtils;
import org.hrachov.com.filmproject.security.UserDetailsImpl;
import org.hrachov.com.filmproject.service.CommentService;
import org.hrachov.com.filmproject.service.FilmService;
import org.hrachov.com.filmproject.service.UserService;
import org.hrachov.com.filmproject.service.impl.NotificationsServiceMono;
import org.hrachov.com.filmproject.utils.HistoryEventSender;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.MediaType;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.test.context.support.WithUserDetails;
import org.springframework.test.web.reactive.server.EntityExchangeResult;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.web.reactive.function.BodyInserters;
import org.testcontainers.shaded.com.fasterxml.jackson.core.JsonProcessingException;
import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;
import reactor.core.publisher.Mono;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.junit.jupiter.api.Assertions.*;

@Slf4j
public class CommentControllerTest extends IntegrationTestBase {

    @Autowired
    private WebTestClient webClient;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private CommentService commentService;
    @Autowired
    private FilmRepository filmRepository;
    @Autowired
    private JwtUtils jwtUtils;
    @Autowired
    private RabbitTemplate rabbitTemplate;
    @Autowired
    private GenreRepository genreRepository;
    @Autowired
    private CommentRepository commentRepository;

    private User testUser;
    private Movie testMovie;
    private String token;
    @Autowired
    private ReactionRepository reactionRepository;

    @BeforeEach
    void setUp() {
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
        reactionRepository.deleteAll();
        commentRepository.deleteAll();
        userRepository.deleteAll();
        filmRepository.deleteAll();
        genreRepository.deleteAll();

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        testUser = new User();
        testUser.setUsername("testuser");
        testUser.setPassword("password"); // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω
        testUser.setEmail("testuser@gmail.com");
        testUser.setFirstName("Test");
        testUser.setLastName("User");
        testUser.setRegistrationDate(LocalDateTime.now());
        testUser.setRoles(new HashSet<>(List.of(Role.ROLE_REGULAR)));
        testUser = userRepository.save(testUser);

        token = jwtUtils.generateToken(new UserDetailsImpl(testUser));
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞
        Genre genre = genreRepository.save(new Genre("Action"));
        testMovie = new Movie();
        testMovie.setTitle("Film 1");
        testMovie.setDescription("Film 1 Description");
        testMovie.setReleaseYear(2020);
        testMovie.setGenres(new HashSet<>(List.of(genre)));
        filmRepository.save(testMovie);
    }

    @Test
    @DisplayName("POST /comments - 201 CREATED | –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –≤–∞–ª–∏–¥–Ω—ã–º JWT")
    void addComment_shouldSucceed() {
        //String jwt = jwtUtils.generateToken(new UserDetailsImpl(testUser));

        CommentDTO commentDTO = new CommentDTO();
        commentDTO.setFilmId(testMovie.getId());
        commentDTO.setUsername(testUser.getUsername());
        commentDTO.setTime(LocalDateTime.now());
        commentDTO.setText("This is a valid comment.");

        EntityExchangeResult<Map> response = webClient.post()
                .uri("/api/comments")
                .header("Authorization", "Bearer " + token)
                .body(BodyInserters.fromValue(commentDTO))
                .exchange()
                .expectStatus().isCreated()
                .expectBody(Map.class)
                .returnResult();

        Map<?, ?> data = response.getResponseBody();
        assertNotNull(data);
        assertEquals("Comment added", data.get("message"));

        Long commentId = Long.valueOf((Integer) data.get("commentId"));
        Comment comment = commentRepository.findById(commentId).orElseThrow();

        assertNotNull(comment);
        assertEquals(commentDTO.getText(), comment.getText());
        assertEquals(testUser.getUsername(), comment.getUser().getUsername());

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ RabbitMQ
        assertNotNull(rabbitTemplate.receive("history.queue", 1000));
    }

    @Test
    @DisplayName("POST /comments - 400 BAD_REQUEST | –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—É—Å—Ç–æ–π")
    void addComment_shouldReturnBadRequest_whenTextIsEmpty() {
        CommentDTO commentDTO = new CommentDTO();
        commentDTO.setFilmId(testMovie.getId());
        commentDTO.setUsername(testUser.getUsername());
        commentDTO.setText(""); // –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç

        webClient.post()
                .uri("/api/comments")
                .header("Authorization", "Bearer " + token)
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –Ω–µ –Ω—É–∂–µ–Ω, @WithUserDetails –≤—Å–µ –¥–µ–ª–∞–µ—Ç –∑–∞ –Ω–∞—Å
                .contentType(MediaType.APPLICATION_JSON)
                .body(BodyInserters.fromValue(commentDTO))
                .exchange()
                .expectStatus().isBadRequest();
    }

    @Test
    @DisplayName("POST /comments - 401 UNAUTHORIZED | –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
    void addComment_shouldReturnUnauthorized_forInvalidToken() {
        String jwt = "FAKE_JWT_TOKEN";
        CommentDTO commentDTO = new CommentDTO();
        commentDTO.setFilmId(testMovie.getId());
        commentDTO.setText("some text");

        webClient.post()
                .uri("/api/comments")
                .header("Authorization", "Bearer " + jwt)
                .body(BodyInserters.fromValue(commentDTO))
                .exchange()
                .expectStatus().isUnauthorized(); // üí° –û–∂–∏–¥–∞–µ–º 401, –∞ –Ω–µ 403
    }

    @Test
    @DisplayName("POST /comments/reply - 201 CREATED | –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    @WithUserDetails("testuser")
    void addReplyToComment_shouldSucceed() {
        // –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        Comment parentComment = new Comment();
        parentComment.setText("This is a parent comment");
        parentComment.setUser(testUser);
        parentComment.setFilm(testMovie);
        parentComment.setTime(LocalDateTime.now());
        parentComment = commentRepository.save(parentComment);

        ReplyDTO replyDTO = new ReplyDTO();
        replyDTO.setText("This is a child comment");

        Comment finalParentComment = parentComment;
        EntityExchangeResult<Map> response = webClient.post()
                .uri(uriBuilder ->
                        uriBuilder.path("/api/comments/reply")
                                .queryParam("parentId", finalParentComment.getId())
                                .build()
                )
                .header("Authorization", "Bearer " + token)
                .body(BodyInserters.fromValue(replyDTO))
                .exchange()
                .expectStatus().isCreated()
                .expectBody(Map.class)
                .returnResult();

        Map<?, ?> data = response.getResponseBody();
        assertNotNull(data);
        assertEquals("Reply added successfully", data.get("message"));

        Long replyId = Long.valueOf((Integer) data.get("replyId"));
        Comment reply = commentRepository.findById(replyId).orElseThrow();

        assertNotNull(reply.getParentComment());
        assertEquals(parentComment.getId(), reply.getParentComment().getId());
    }

    @Test
    @DisplayName("POST /comments/reply - 400 BAD_REQUEST | –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–π")
    @WithUserDetails("testuser")
    void addReply_shouldReturnBadRequest_whenTextIsNull() {
        Comment parentComment = new Comment();
        parentComment.setText("Parent comment");
        parentComment.setUser(testUser);
        parentComment.setFilm(testMovie);
        parentComment = commentRepository.save(parentComment);

        ReplyDTO replyDTO = new ReplyDTO(); // –¢–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (null)


        Comment finalParentComment = parentComment;
        webClient.post()
                .uri(uriBuilder ->
                        uriBuilder.path("/api/comments/reply")
                                .queryParam("parentId", finalParentComment.getId())
                                .build()
                )
                .header("Authorization", "Bearer " + token)
                .contentType(MediaType.APPLICATION_JSON)
                .body(BodyInserters.fromValue(replyDTO))
                .exchange()
                .expectStatus().isBadRequest();
    }

    @Test
    @DisplayName("POST /comments/reply - 401 UNAUTHORIZED | –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
    void addReply_shouldReturnUnauthorized_forInvalidToken() {
        ReplyDTO replyDTO = new ReplyDTO();
        replyDTO.setText("This is a child comment");

        webClient.post()
                .uri(uriBuilder ->
                        uriBuilder.path("/api/comments/reply")
                                .queryParam("parentId", 1L) // ID –Ω–µ –≤–∞–∂–µ–Ω, –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–π–¥–µ—Ç –¥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
                                .build()
                )
                .header("Authorization", "Bearer FAKE_TOKEN")
                .body(BodyInserters.fromValue(replyDTO))
                .exchange()
                .expectStatus().isUnauthorized(); // üí° –û–∂–∏–¥–∞–µ–º 401
    }


    @Test
    @DisplayName("GET /comments - 200 OK | –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ñ–∏–ª—å–º–∞")
    void getAllComments_shouldSucceed() {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        Comment comment1 = new Comment();
        comment1.setText("Comment 1");
        comment1.setUser(testUser);
        comment1.setFilm(testMovie);
        comment1.setTime(LocalDateTime.now().minusDays(1));
        commentRepository.save(comment1);

        Comment comment2 = new Comment();
        comment2.setText("Comment 2");
        comment2.setUser(testUser);
        comment2.setFilm(testMovie);
        comment2.setTime(LocalDateTime.now());
        commentRepository.save(comment2);

        // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
        EntityExchangeResult<Map<String, Object>> response = webClient.get()
                .uri(uriBuilder -> uriBuilder.path("/api/comments")
                        .queryParam("movieId", testMovie.getId())
                        .queryParam("page", 0)
                        .queryParam("size", 5)
                        .queryParam("sort", "time,desc")
                        .build())
                .exchange()
                .expectStatus().isOk()
                .expectBody(new ParameterizedTypeReference<Map<String, Object>>() {})
                .returnResult();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        Map<String, Object> page = response.getResponseBody();
        assertNotNull(page);
        List<Map<String, Object>> content = (List<Map<String, Object>>) page.get("content");
        assertEquals(2, content.size());
        assertEquals("Comment 2", content.get(0).get("text"));
        assertEquals("Comment 1", content.get(1).get("text"));
    }

    @Test
    @DisplayName("GET /comments - 404 NOT_FOUND | –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    void getAllComments_shouldReturnNotFound_whenMovieNotFound() {
        webClient.get()
                .uri(uriBuilder -> uriBuilder.path("/api/comments")
                        .queryParam("movieId", 999L)
                        .queryParam("page", 0)
                        .queryParam("size", 5)
                        .queryParam("sort", "time,desc")
                        .build())
                .exchange()
                .expectStatus().isNotFound();
    }

    @Test
    @DisplayName("GET /comments - 200 OK | –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ñ–∏–ª—å–º–∞")
    void getAllComments_shouldReturnEmptyPage_whenNoComments() {
        EntityExchangeResult<Map<String, Object>> response = webClient.get()
                .uri(uriBuilder -> uriBuilder.path("/api/comments")
                        .queryParam("movieId", testMovie.getId())
                        .queryParam("page", 0)
                        .queryParam("size", 5)
                        .queryParam("sort", "time,desc")
                        .build())
                .exchange()
                .expectStatus().isOk()
                .expectBody(new ParameterizedTypeReference<Map<String, Object>>() {})
                .returnResult();

        Map<String, Object> page = response.getResponseBody();
        assertNotNull(page);
        List<Map<String, Object>> content = (List<Map<String, Object>>) page.get("content");
        assertEquals(0, content.size());
    }

    // –¢–µ—Å—Ç—ã –¥–ª—è getRecentlyComments
    @Test
    @DisplayName("GET /comments/recently - 200 OK | –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    void getRecentlyComments_shouldSucceed() {


        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for (int i = 0; i < 7; i++) {
            Comment comment = new Comment();
            comment.setText("Comment " + i);
            comment.setUser(testUser);
            comment.setFilm(testMovie);
            comment.setTime(LocalDateTime.now().minusMinutes(7 - i));
            commentRepository.save(comment);
        }

        // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
        EntityExchangeResult<List<Map<String, Object>>> response = webClient.get()
                .uri("/api/comments/recently")
                .exchange()
                .expectStatus().isOk()
                .expectBody(new ParameterizedTypeReference<List<Map<String, Object>>>() {})
                .returnResult();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        List<Map<String, Object>> comments = response.getResponseBody();
        assertNotNull(comments);
        assertEquals(5, comments.size());
        assertEquals("Comment 6", comments.get(0).get("text"));
        assertEquals("Comment 2", comments.get(4).get("text"));
    }

    @Test
    @DisplayName("GET /comments/recently - 200 OK | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–µ–Ω—å—à–µ 5")
    void getRecentlyComments_shouldReturnAll_whenLessThanFive() {
        // –°–æ–∑–¥–∞–Ω–∏–µ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        for (int i = 0; i < 3; i++) {
            Comment comment = new Comment();
            comment.setText("Comment " + i);
            comment.setUser(testUser);
            comment.setFilm(testMovie);
            comment.setTime(LocalDateTime.now().minusMinutes(3-i));
            commentRepository.save(comment);
        }

        // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
        EntityExchangeResult<List<Map<String, Object>>> response = webClient.get()
                .uri("/api/comments/recently")
                .exchange()
                .expectStatus().isOk()
                .expectBody(new ParameterizedTypeReference<List<Map<String, Object>>>() {})
                .returnResult();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        List<Map<String, Object>> comments = response.getResponseBody();
        assertNotNull(comments);
        assertEquals(3, comments.size());
        assertEquals("Comment 2", comments.get(0).get("text"));
        assertEquals("Comment 0", comments.get(2).get("text"));
    }

    @Test
    @DisplayName("GET /comments/recently - 200 OK | –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    void getRecentlyComments_shouldReturnEmptyList_whenNoComments() {
        EntityExchangeResult<List<Map<String, Object>>> response = webClient.get()
                .uri("/api/comments/recently")
                .exchange()
                .expectStatus().isOk()
                .expectBody(new ParameterizedTypeReference<List<Map<String, Object>>>() {})
                .returnResult();

        List<Map<String, Object>> comments = response.getResponseBody();
        assertNotNull(comments);
        assertEquals(0, comments.size());
    }

    // –¢–µ—Å—Ç—ã –¥–ª—è addReaction
    @Test
    @DisplayName("POST /comments/{commentId}/reactions - 200 OK | –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏")
    void addReaction_shouldSucceed() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        Comment comment = new Comment();
        comment.setText("Test comment");
        comment.setUser(testUser);
        comment.setFilm(testMovie);
        comment.setTime(LocalDateTime.now());
        comment = commentRepository.save(comment);

        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        Map<String, String> request = Map.of("type", "LIKE");

        // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
        EntityExchangeResult<Map<String, String>> response = webClient.post()
                .uri("/api/comments/" + comment.getId() + "/reactions")
                .header("Authorization", "Bearer " + token)
                .contentType(MediaType.APPLICATION_JSON)
                .body(BodyInserters.fromValue(request))
                .exchange()
                .expectStatus().isOk()
                .expectBody(new ParameterizedTypeReference<Map<String, String>>() {})
                .returnResult();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        Map<String, String> data = response.getResponseBody();
        assertNotNull(data);
        assertEquals("Reaction added", data.get("message"));
    }

    @Test
    @DisplayName("POST /comments/{commentId}/reactions - 404 NOT_FOUND | –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
    void addReaction_shouldReturnNotFound_whenCommentNotFound() {
        Map<String, String> request = Map.of("type", "LIKE");

        webClient.post()
                .uri("/api/comments/999/reactions")
                .header("Authorization", "Bearer " + token)
                .contentType(MediaType.APPLICATION_JSON)
                .body(BodyInserters.fromValue(request))
                .exchange()
                .expectStatus().isNotFound();
    }

    @Test
    @DisplayName("POST /comments/{commentId}/reactions - 401 UNAUTHORIZED | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
    void addReaction_shouldReturnUnauthorized_whenNotAuthenticated() {
        Comment comment = new Comment();
        comment.setText("Test comment");
        comment.setUser(testUser);
        comment.setFilm(testMovie);
        comment.setTime(LocalDateTime.now());
        comment = commentRepository.save(comment);

        Map<String, String> request = Map.of("type", "LIKE");

        webClient.post()
                .uri("/api/comments/" + comment.getId() + "/reactions")
                .contentType(MediaType.APPLICATION_JSON)
                .body(BodyInserters.fromValue(request))
                .exchange()
                .expectStatus().isUnauthorized();
    }

    @Test
    @DisplayName("POST /comments/{commentId}/reactions - 400 BAD_REQUEST | –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏")
    void addReaction_shouldReturnBadRequest_whenInvalidReactionType() {
        Comment comment = new Comment();
        comment.setText("Test comment");
        comment.setUser(testUser);
        comment.setFilm(testMovie);
        comment.setTime(LocalDateTime.now());
        comment = commentRepository.save(comment);

        Map<String, String> request = Map.of("type", "INVALID");

        webClient.post()
                .uri("/api/comments/" + comment.getId() + "/reactions")
                .header("Authorization", "Bearer " + token)
                .contentType(MediaType.APPLICATION_JSON)
                .body(BodyInserters.fromValue(request))
                .exchange()
                .expectStatus().isBadRequest();
    }
}